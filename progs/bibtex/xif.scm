(texmacs-module (bibtex xif)
  (:use (bibtex bib-utils) (bibtex plain)))

(bib-define-style "xif" "plain")

(tm-define (bib-format-name x)
  (:mode bib-xif?)
  (let* 
    (
      (f (if (bib-null? (list-ref x 1)) "" `(concat ,(bib-abbreviate (list-ref x 1) "." `(nbsp)) (nbsp))))
      (ff (bib-format-first-name x))
      (vv (if (bib-null? (list-ref x 2)) "" `(concat ,(list-ref x 2) (nbsp))))
      (ll (if (bib-null? (list-ref x 3)) "" (bib-purify (list-ref x 3))))
      (jj (if (bib-null? (list-ref x 4)) "" `(concat ", " ,(list-ref x 4))))
    )
    `(with "font-shape" "small-caps" (concat ,ff ,vv ,ll ,jj))  ; 'f' for abbrv. first name, 'ff' for full first name
  )
)

(tm-define (bib-format-bibitem n x)
  (:mode bib-xif?)
  `(bibitem* ,(list-ref x 2)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;Deal with unknown citation format type:
;;output error message into the citation
;;tbd: output warning to TeXmacs warnings list dialog  
(tm-define (bib-format-unknown n x)
  ; (:mode bib-xif?)  
  "UNKNOWN CITATION TYPE"
)

; ;;PST 2021-12-01 Extended bib-format-date:
; ;;Changed behaviour if 'year' is empty to use 'date',
; ;;and put delimiters brL and brR around the date (set to "" if not wanted)
; ;;Do not overload bib-format-date as it has additional arguments!
; (tm-define (bib-format-dateX x brL brR)
;   (:mode bib-xif?)
;   (let* ((y (bib-field x "year"))
;      (m (bib-field x "month")))
;   `(concat ,brL  
;        ,(if (bib-null? y)
;            (bib-field x "date") ;;return 'date' if 'year' is empty! tbd: better formating!
;          (if (bib-null? m) y `(concat ,m " " ,y))
;         ) 
;        ,brR
; ))   )  

(tm-define (bib-format-text-earchiv x)
  `(concat
    ,(bib-format-field-preserve-case x "archiveprefix") ":"
    ,(bib-format-field x "eprint") ;; ref within archive
    ,(if (bib-empty? x "version") "" ;;no version provided
      `(concat "v" ,(bib-format-field x "version"))
    )
  )
)

;;format an e-archiv format like arXiv, DOI etc.
;;Returns <hlink|describing text|URL> object instead of string
;;(see e.g. bib-label how to do insert teXmacs primitives)
(tm-define (bib-format-earchiv x)
  ; (:mode bib-xif?)
  `(concat
    ,(if (bib-empty? x "doi") 
      ;;if no DOI fall back to raw URL
      (if (bib-empty? x "url") ""
        (if (bib-empty? x "urldate") 
                    (bib-format-field x "url") ;;(bib-field x "url") returns <slink|url>, so that is a link
          `(concat ,(bib-format-field x "url") " accessed " ,(bib-format-field x "urldate"))
        )
      )
      ;;handle DOI:
      (if (bib-empty? x "url")
        `(hlink (concat "DOI:" ,(bib-format-field x "doi")) (concat "https://doi.org/" ,(bib-field x "doi")) )
        (if (list? (bib-field x "url"))
          `(hlink (concat "DOI:" ,(bib-format-field x "doi")) ,(cadr (bib-field x "url")) ) ;;(bib-field x "url") returns <slink|url>, so take cadr to get url
          `(hlink (concat "DOI:" ,(bib-format-field x "doi")) (bib-field x "url") )
        )
      )
    )
    " "
    ,(if (bib-empty? x "archiveprefix")
      ""
      (if (equal? (bib-field x "archiveprefix") "arXiv")
        `(hlink ,(bib-format-text-earchiv x) (concat "https://arxiv.org/abs/" ,(bib-format-field x "eprint")))
        (bib-format-text-earchiv x)
      )
    )
  )
)

;;PST 2021-12-01 Added for "online" doctype for online sources from arXiv etc.
;;as generated by the tool chain Zotero->better BibLaTex Export->Texmacs bibtex Import
(tm-define (bib-format-online n x)
  ; (:mode bib-xif?)
  `(concat
     ,(bib-format-bibitem n x)
     ,(bib-label (list-ref x 2))
     ,(bib-new-list-spc
       `(,(bib-new-block (bib-format-author x))
       ,(bib-new-block (bib-format-field x "title"))
     ,(bib-format-earchiv x) ;;format the arXiv, doi, url etc online reference
     ,(if (bib-empty? x "primaryclass")
           "" ;;if no primary class given
           `(concat "[" ,(bib-format-field x "primaryclass") "]") ;; e.g. quant-ph
      )           
     ,(bib-format-date x)     
     ))   
   ". " ;terminates the citation by .
   ,(bib-new-block (bib-format-field x "note")) ;adds the note and terminates by . if any
  ))

(tm-define (bib-format-article n x)
  (:mode bib-xif?)
  `(concat
     ,(bib-format-bibitem n x)
     ,(bib-label (list-ref x 2))
     ,(bib-new-list-spc
       `(,(bib-new-block (bib-format-author x))
   ,(bib-new-block (bib-emphasize (bib-format-field x "title")))
   ,(bib-new-block
     (if (bib-empty? x "crossref")
         (bib-new-sentence
    `(,(bib-format-field x "journal")
      ,(bib-format-vol-num-pages x)
      ,(bib-format-date x)))
         (bib-new-sentence
    `((concat ,(bib-translate "in ")
        (cite ,(bib-field x "crossref")))
      ,(bib-format-pages x)))))
   ,(bib-format-earchiv x) ;;format the arXiv, doi, url etc online reference
   ,(bib-new-block (bib-format-field x "note"))))))

; (tm-define (bib-format-article n x)
;   (:mode bib-siam?)
;   `(concat
;      ,(bib-format-bibitem n x)
;      ,(bib-label (list-ref x 2))
;      ,(bib-new-list-spc
;        `(,(bib-new-block
;      (bib-new-sentence
;       `(,(bib-format-author x)
;         ,(bib-emphasize (bib-format-field-Locase x "title"))
;         ,@(if (bib-empty? x "crossref")
;         `(,(bib-format-field x "journal")
;           (concat
;       ,(bib-field x "volume")
;       ,(if (bib-empty? x "year") ""
;            `(concat
;         ,(if (bib-empty? x "volume") "" " ")
;         "(" ,(bib-field x "year") ")")))
;           ,(bib-format-pages x))
;         `((concat ,(bib-translate "in ")
;             (cite ,(bib-field x "crossref")))
;           ,(bib-format-pages x))))))
;    ,(bib-new-block (bib-format-field x "note"))))))

(tm-define (bib-format-book n x)
  (:mode bib-xif?)
  `(concat
     ,(bib-format-bibitem n x)
     ,(bib-label (list-ref x 2))
     ,(bib-new-list-spc
       `(,(bib-new-block
     (if (bib-empty? x "author")
         (bib-format-editor x)
         (bib-format-author x)))
   ,(bib-new-block
     (bib-new-sentence
      `(,(bib-emphasize (bib-format-field x "title"))
        ,(bib-format-bvolume x))))
   ,(bib-new-block
     (if (bib-empty? x "crossref")
         (bib-new-list-spc
    `(,(bib-new-sentence
        `(,(bib-format-number-series x)))
      ,(bib-new-sentence
        `(,(bib-format-field x "publisher")
          ,(bib-format-field x "address")
          ,(if (bib-empty? x "edition") ""
         `(concat ,(bib-format-field x "edition")
            ,(bib-translate " edition")))
          ,(bib-format-date x)))))
         (bib-new-sentence
    `((concat ,(bib-translate "in ")
        (cite ,(bib-field x "crossref")))
      ,(bib-format-field x "edition")
      ,(bib-format-date x)))))
   ,(bib-format-earchiv x) ;;format the arXiv, doi, url etc online reference
   ,(bib-new-block (bib-format-field x "note"))))))

(tm-define (bib-format-booklet n x)
  (:mode bib-xif?)
  `(concat
     ,(bib-format-bibitem n x)
     ,(bib-label (list-ref x 2))
     ,(bib-new-list-spc
       `(,(bib-new-block (bib-format-author x))
   ,(bib-new-block (bib-format-field x "title"))
   ,(bib-new-case-preserved-block
     (bib-new-case-preserved-sentence
      `(,(bib-format-field-preserve-case x "howpublished")
        ,(bib-upcase-first (bib-format-field x "address"))
        ,(bib-format-date x))))
   ,(bib-format-earchiv x) ;;format the arXiv, doi, url etc online reference
   ,(bib-new-block (bib-format-field x "note"))))))

(tm-define (bib-format-inbook n x)
  (:mode bib-xif?)
  `(concat
     ,(bib-format-bibitem n x)
     ,(bib-label (list-ref x 2))
     ,(bib-new-list-spc
       `(,(bib-new-block (if (bib-empty? x "author") (bib-format-editor x)
       (bib-format-author x)))
   ,(bib-new-block
     (bib-new-sentence
      `(,(bib-emphasize (bib-format-field x "title"))
        ,(bib-format-in-ed-booktitle x)
        ,(bib-format-bvolume x)
        ,(bib-format-chapter-pages x))))
   ,(bib-new-block
     (if (bib-empty? x "crossref")
         (bib-new-list-spc
    `(,(bib-new-sentence `(,(bib-format-number-series x)))
      ,(bib-new-sentence
        `(,(bib-format-field x "publisher")
          ,(bib-format-field x "address")
          ,(if (bib-empty? x "edition") ""
         `(concat ,(bib-format-field x "edition")
            ,(bib-translate " edition")))
          ,(bib-format-date x)))))
         (bib-new-sentence
    `(,(bib-format-chapter-pages x)
      (concat ,(bib-translate "in ")
        (cite ,(bib-field x "crossref")))))))
   ,(bib-format-earchiv x) ;;format the arXiv, doi, url etc online reference
   ,(bib-new-block (bib-format-field x "note"))))))

(tm-define (bib-format-incollection n x)
  (:mode bib-xif?)
  `(concat
     ,(bib-format-bibitem n x)
     ,(bib-label (list-ref x 2))
     ,(bib-new-list-spc
       `(,(bib-new-block (bib-format-author x))
   ,(bib-new-block (bib-emphasize (bib-format-field x "title")))
   ,(bib-new-block
     (if (bib-empty? x "crossref")
         (bib-new-list-spc
    `(,(bib-new-sentence
        `(,(bib-format-in-ed-booktitle x)
          ,(bib-format-bvolume x)
          ,(bib-format-number-series x)
          ,(bib-format-chapter-pages x)))
      ,(bib-new-sentence
        `(,(bib-format-field x "publisher")
          ,(bib-format-field x "address")
          ,(bib-format-date x)))))
         (bib-new-sentence
    `((concat ,(bib-translate "in ")
        (cite ,(bib-field x "crossref")))
      ,(bib-format-chapter-pages x)))))
   ,(bib-format-earchiv x) ;;format the arXiv, doi, url etc online reference
   ,(bib-new-block (bib-format-field x "note"))))))

(tm-define (bib-format-inproceedings n x)
  (:mode bib-xif?)
  `(concat
    ,(bib-format-bibitem n x)
    ,(bib-label (list-ref x 2))
    ,(bib-new-list-spc
      `(,(bib-new-block (bib-format-author x))
  ,(bib-new-block (bib-emphasize (bib-format-field x "title")))
  ,(bib-new-block
    (if (bib-empty? x "crossref")
        (bib-new-list-spc
         `(,(bib-new-sentence
       `(,(bib-format-in-ed-booktitle x)
         ,(bib-format-bvolume x)
         ,(bib-format-number-series x)
         ,(bib-format-pages x)))
     ,(if (bib-empty? x "address")
          (bib-new-sentence
           `(,(bib-format-field x "organization")
       ,(bib-format-field x "publisher")
       ,(bib-format-date x)))
          (bib-new-list-spc
           `(,(bib-new-sentence
         `(,(bib-format-field x "address")
           ,(bib-format-date x)))
       ,(bib-new-sentence
         `(,(bib-format-field x "organization")
           ,(bib-format-field x "publisher"))))))))
        (bib-new-sentence
         `((concat ,(bib-translate "in ")
       (cite ,(bib-field x "crossref")))
     ,(bib-format-pages x)))))
  ,(bib-format-earchiv x) ;;format the arXiv, doi, url etc online reference
  ,(bib-new-block (bib-format-field x "note"))))))

(tm-define (bib-format-manual n x)
  (:mode bib-xif?)
  `(concat
     ,(bib-format-bibitem n x)
     ,(bib-label (list-ref x 2))
     ,(bib-new-list-spc
       `(,(bib-new-block
     (if (bib-empty? x "author")
         (if (bib-empty? x "organization") ""
       (bib-new-sentence
        `(,(bib-format-field x "organization")
          ,(bib-format-field x "address"))))
         (bib-format-author x)))
   ,(bib-new-block (bib-emphasize (bib-format-field x "title")))
   ,(bib-new-block
     (bib-new-sentence
      `(,(bib-format-field x "organization")
        ,(bib-format-field x "address")
        ,(if (bib-empty? x "edition") ""
       `(concat ,(bib-format-field x "edition")
          ,(bib-translate " edition")))
        ,(bib-format-date x))))
   ,(bib-format-earchiv x) ;;format the arXiv, doi, url etc online reference
   ,(bib-new-block (bib-format-field x "note"))))))

(tm-define (bib-format-mastersthesis n x)
  (:mode bib-xif?)
  `(concat
     ,(bib-format-bibitem n x)
     ,(bib-label (list-ref x 2))
     ,(bib-new-list-spc
       `(,(bib-new-block (bib-format-author x))
   ,(bib-new-block (bib-format-field x "title"))
   ,(bib-new-block
     (bib-new-sentence
      `(,(if (bib-empty? x "type")
       (bib-translate "Master's thesis")
       (bib-format-field x "type"))
        ,(bib-format-field x "school")
        ,(bib-format-field x "address")
        ,(bib-format-date x))))
   ,(bib-format-earchiv x) ;;format the arXiv, doi, url etc online reference
   ,(bib-new-block (bib-format-field x "note"))))))

(tm-define (bib-format-phdthesis n x)
  (:mode bib-xif?)
  `(concat
     ,(bib-format-bibitem n x)
     ,(bib-label (list-ref x 2))
     ,(bib-new-list-spc
       `(,(bib-new-block (bib-format-author x))
   ,(bib-new-block (bib-emphasize (bib-format-field x "title")))
   ,(bib-new-block
     (bib-new-sentence
      `(,(if (bib-empty? x "type")
       (bib-translate "PhD thesis")
       (bib-format-field x "type"))
        ,(bib-format-field x "school")
        ,(bib-format-field x "address")
        ,(bib-format-date x))))
   ,(bib-format-earchiv x) ;;format the arXiv, doi, url etc online reference
   ,(bib-new-block (bib-format-field x "note"))))))

(tm-define (bib-format-proceedings n x)
  (:mode bib-xif?)
  `(concat
     ,(bib-format-bibitem n x)
     ,(bib-label (list-ref x 2))
     ,(bib-new-list-spc
       `(,(bib-new-block
     (if (bib-empty? x "editor")
         (bib-format-field x "organization")
         (bib-format-editor x)))
   ,(bib-new-block
     (bib-new-sentence
      `(,(bib-emphasize (bib-format-field x "title"))
        ,(bib-format-bvolume x)
        ,(bib-format-number-series x))))
   ,(bib-new-block
     (if (bib-empty? x "address")
         (bib-new-sentence
    `(,(if (bib-empty? x "editor") ""
           (bib-format-field x "organization"))
      ,(bib-format-field x "publisher")
      ,(bib-format-date x)))
         (bib-new-list-spc
    `(,(bib-new-sentence
        `(,(bib-format-field x "address")
          ,(bib-format-date x)))
      ,(bib-new-sentence
        `(,(if (bib-empty? x "editor") ""
         (bib-format-field x "organization"))
          ,(bib-format-field x "publisher")))))))
   ,(bib-format-earchiv x) ;;format the arXiv, doi, url etc online reference
   ,(bib-new-block (bib-format-field x "note"))))))

(tm-define (bib-format-techreport n x)
  (:mode bib-xif?)
  `(concat
     ,(bib-format-bibitem n x)
     ,(bib-label (list-ref x 2))
     ,(bib-new-list-spc
       `(,(bib-new-block (bib-format-author x))
   ,(bib-new-block (bib-emphasize (bib-format-field x "title")))
   ,(bib-new-block
     (bib-new-sentence
      `(,(bib-format-tr-number x)
        ,(bib-format-field x "institution")
        ,(bib-format-field x "address")
        ,(bib-format-date x))))
   ,(bib-format-earchiv x) ;;format the arXiv, doi, url etc online reference
   ,(bib-new-block (bib-format-field x "note"))))))

(tm-define (bib-format-misc n x)
  (:mode bib-xif?)
  `(concat
     ,(bib-format-bibitem n x)
     ,(bib-label (list-ref x 2))
     ,(bib-new-list-spc
       `(,(bib-new-block (bib-format-author x))
   ,(bib-new-block (bib-emphasize (bib-format-field x "title")))
   ,(bib-new-case-preserved-block
     (bib-new-case-preserved-sentence
      `(,(bib-format-field-preserve-case x "howpublished")
        ,(bib-format-date x))))
   ,(bib-format-earchiv x) ;;format the arXiv, doi, url etc online reference
   ,(bib-new-block (bib-format-field x "note"))))))

(tm-define (bib-format-entry n x)
  (:mode bib-xif?)
  (if (and (list? x) (func? x 'bib-entry)
     (= (length x) 4) (func? (list-ref x 3) 'document))
      (with doctype (list-ref x 1)
  (cond
    ((equal? doctype "article") (bib-format-article n x))
    ((equal? doctype "book") (bib-format-book n x))
    ((equal? doctype "booklet") (bib-format-booklet n x))
    ((equal? doctype "inbook") (bib-format-inbook n x))
    ((equal? doctype "incollection") (bib-format-incollection n x))
    ((equal? doctype "inproceedings") (bib-format-inproceedings n x))
    ((equal? doctype "conference") (bib-format-inproceedings n x))
    ((equal? doctype "manual") (bib-format-manual n x))
    ((equal? doctype "mastersthesis") (bib-format-mastersthesis n x))
    ((equal? doctype "misc") (bib-format-misc n x))
    ((equal? doctype "phdthesis") (bib-format-phdthesis n x))
    ((equal? doctype "proceedings") (bib-format-proceedings n x))
    ((equal? doctype "techreport") (bib-format-techreport n x))
    ((equal? doctype "online") (bib-format-online n x))
    (else (bib-format-unknown n x))))))